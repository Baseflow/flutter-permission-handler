# This is a basic workflow to help you get started with Actions

name: permission_handler

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths:
    - 'permission_handler/**'
  pull_request:
    branches: [ master ]
    paths:
    - 'permission_handler/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  format:
    name: Format

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      source-directory: ./permission_handler 

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Make sure the stable version of Flutter is available
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      # Download all Flutter packages
      - name: Download dependencies
        run: flutter pub get
        working-directory: ${{env.source-directory}}

      # Run Flutter Format to ensure formatting is valid
      - name: Run Flutter Format
        run: flutter format --set-exit-if-changed .
        working-directory: ${{env.source-directory}}
        
  analyze:
    name: Analyze
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      source-directory: ./permission_handler

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
          
      # Make sure the stable version of Flutter is available
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      # Download all Flutter packages
      - name: Download dependencies
        run: flutter pub get
        working-directory: ${{env.source-directory}}
     
      # Run Flutter Analyzer
      - name: Run Flutter Analyzer
        run: flutter analyze
        working-directory: ${{env.source-directory}}
        
  build_android:
    name: Build Android App
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      source-directory: ./permission_handler 
      example-directory: ./permission_handler/example

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Ensure correct JAVA version is installed.
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      
      # Make sure the stable version of Flutter is available
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      # Download all Flutter packages
      - name: Download dependencies
        run: flutter pub get
        working-directory: ${{env.source-directory}}

      # Build Android version of the example App
      - name: Run Android build
        run: flutter build apk --release
        working-directory: ${{env.example-directory}}
        
  build_ios:
    name: Build iOS App
    
    # The type of runner that the job will run on
    runs-on: macos-latest

    env:
      source-directory: ./permission_handler 
      example-directory: ./permission_handler/example

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Make sure the stable version of Flutter is available
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      # Download all Flutter packages
      - name: Download dependencies
        run: flutter pub get
        working-directory: ${{env.source-directory}}

      # Build iOS version of the example App
      - name: Run iOS build
        run: flutter build ios --release --no-codesign
        working-directory: ${{env.example-directory}}

  tests:
    name: Unit-tests
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      source-directory: ./permission_handler 

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Make sure the stable version of Flutter is available
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      # Download all Flutter packages
      - name: Download dependencies
        run: flutter pub get
        working-directory: ${{env.source-directory}}
      
      # Run all unit-tests with code coverage
      - name: Run unit tests
        run: flutter test --coverage
        working-directory: ${{env.source-directory}}

      # Upload code coverage information
      - uses: codecov/codecov-action@v1
        with:
          file: ${{env.source-directory}}/coverage/lcov.info # optional
          name: permission_handler (App Facing Package) # optional
          fail_ci_if_error: true